Class 01


  User story - Search an employee
  Search by ID
Given user navigates to HRMS application
When user enters valid username and password
And user clicks on Login button
Then user navigates to dashboard page
When user clicks on PIM option
And user clicks on employee information button
When user enters employee id
And user clicks on search button
Then user see employee information is displayed

  Search by name
Given user navigates to HRMS application
When user enters valid username and password
And user clicks on Login button
Then user navigates to dashboard page
When user clicks on PIM option
And user clicks on employee information button
When user enters employee name
And user clicks on search button
Then user see employee information is displayed

to execute all the feature files from one class, we need runner class

steps package - for all step definitions
runners package - for all runner definitions
config directory-for all config files
features directory- for all feature files

Class 4
Runner class - Cucumber options in runner class
features -  to run the feture file, we provide a path to its repository
glue - the path of our step definitions package
dryRun - if we set it to true, it stops actual execution and scans all the steps quickly
and provide us missing step definition
monochrome - to remove irrelavant information from the console
plugin - pretty - to print the steps in the console
tags - to group the scenario for specific type of execution

POM - page object model - it is a design pattern

it allows QA's to keep object repository -
in simple language, QA's write all the locators of the page in respective class

LoginPage
DashboardPage

Class 5
Hooks - we write pre condition and post condition using hooks in Cucumber
@Before - pre condition needs to be mentioned in this
@After - post condition needs to be mentioned in this

Rules:
Hooks class must be created inside steps package

Background - it is applicable only for one feature file
            it means for every feature file background will be different.
            steps which are common among all the scenarios of that feature file
            will be taken into background, but make sure the flow is not broken.
            If the flow breaks, then we cannot take steps in background after that.

Hooks vs Background

Hooks are applicable for whole project (for all the feature files).
Background is applicable for one feature file and varies from file to file.
First Hooks executes, then Background executes, then scenario executes.


Class 6
Recap

Parameterization testing
--we can add one employee using feature file, instead of passing hardcoded data,
we pass values inside the scenario such as "abc", "xyz", etc.

--to increase the scope of testing, we use data driven testing concept
instead of scenario, we use scenario outline with examples table
--in examples table, we pass multiple data sets using keys and values

Data table
it allows us to pass multiple sets of data without executing background

Example table - Hooks and Background execute every time as per the data set
Data table - Hooks and Background execute just one time

Working with excel
.xls - HSSF
.xlsx - XSSF


Class 7

Cucumber accepts array of byte for screenshots

When we generate any report, this should be under target folder.

How to open th report:
right click --> open in --> browser --> chrome


Class 8
Recap - screenshot method - in cucumber it accepts array of byte.
To get the unique screenshot name, we have implemented timestamp method.
We used Scenario class of cucumber to get the details of execution.
To generate report - we use html plugin from runner class
Reports always generate in target folder.
We execute our code from pom.xml file, to achieve this we have used
maven surefire plugin

maven cucumber reporting plugin we use to get more detailed and colorful report

Log files - when we execute our code, we need to sharpen our debugging skills.
            to have quick information about every step of execution, we need messages in the
            form of report.
            To get details added by us, we need to create log files.
            To create this log file, we use log4j concept.

Maven lifecycle -
        compile - source code converts into binary code
        package - code will be packaged into jar files
        install - jars will be installed to local repo .m2
        deploy - here jars will go to remote repo
        test - code will be tested in this lifecycle
        clean - this will clean your target folder

        when you run test
         this will execute compile - install - deploye - test


Database Testing:

1.Created database utility:
    1. to get object of resultset
    2. to get object of resultsetmetadata
    3. to retrieve data from resultset and store in ListofMaps

 Now we can write test cases:
    1.feature file
    2.write steps in step definition




